{
    "inference_engine": {
        "executable_location": "{engine_path}/target/{target_arch}/bin/qnn-net-run",
        "backend_locations": {
            "x86": {
                "cpu": [
                    "{engine_path}/target/{target_arch}/lib/libQnnCpu.so"
                ],
                "gpu": [
                    "{engine_path}/target/{target_arch}/lib/libQnnGpu.so"
                ],
                "dspv68": [
                    "{engine_path}/target/{target_arch}/lib/libQnnHtp.so"
                ],
                "dspv69": [
                    "{engine_path}/target/{target_arch}/lib/libQnnHtp.so"
                ]
            },
            "android": {
                "cpu": [
                    "{engine_path}/target/{target_arch}/lib/libQnnCpu.so"
                ],
                "gpu": [
                    "{engine_path}/target/{target_arch}/lib/libQnnGpu.so"
                ],
                "dspv66": [
                    "{engine_path}/target/{target_arch}/lib/libQnnDspV66Stub.so",
                    "{engine_path}/target/hexagon-v66/lib/unsigned/libQnnDspV66Skel.so"
                ],
                "dspv68": [
    		    "{engine_path}/target/{target_arch}/lib/libQnnHtp.so",
                    "{engine_path}/target/{target_arch}/lib/libQnnHtpPrepare.so",
                    "{engine_path}/target/{target_arch}/lib/libQnnHtpV68Stub.so",
                    "{engine_path}/target/hexagon-v68/lib/unsigned/libQnnHtpV68Skel.so"
                ],
                "dspv69": [
    		    "{engine_path}/target/{target_arch}/lib/libQnnHtp.so",
                    "{engine_path}/target/{target_arch}/lib/libQnnHtpPrepare.so",
                    "{engine_path}/target/{target_arch}/lib/libQnnHtpV69Stub.so",
                    "{engine_path}/target/hexagon-v69/lib/unsigned/libQnnHtpV69Skel.so"
                ]
            }
        },
        "op_packages": {
            "x86": {
                "cpu": [],
                "gpu": ["{engine_path}/target/{target_arch}/lib/libQnnGpuOpPkg.so"],
                "dspv68": [],
                "dspv69": []
            },
            "android": {
                "cpu": [],
                "gpu": ["{engine_path}/target/{target_arch}/lib/libQnnGpuOpPkg.so"],
                "dspv66": [],
                "dspv68": [],
                "dspv69": []
            },
            "interface": "QnnOpPackage_interfaceProvider"
        },
        "lib_generator": {
            "executable": "qnn-model-lib-generator",
            "arguments": {
                "model_cpp": "-c",
                "model_bin": "-b",
                "output_path": "-o",
                "lib_name": "-l",
                "lib_target" : "-t"
            }
        },
        "backend_extension_shared_library_path": "libQnnHtpNetRunExtensions.so",
        "aic_backend_extension_shared_library_path":"",
	"sdk_tools_root": "{engine_path}/target/x86_64-linux-clang",
        "environment_variables": {
            "PYTHONPATH": "{sdk_tools_root}/python/",
            "PATH": "{sdk_tools_root}/bin",
            "LD_LIBRARY_PATH": "{sdk_tools_root}/lib"
        },
        "profiler": {
            "executable": "qnn-profile-viewer",
            "executable_path": "{engine_path}/target/{target_arch}/bin/qnn-profile-viewer",
            "arguments": {
                "input_log": "--input_log",
                "output_csv": "--output",
                "reader": "--reader"
            }
        },
        "libcpp_dependency": true
    },
    "devices": {
        "host": ["x86"],
        "target": ["x86", "linux-embedded", "android"]
    },
    "converter": {
        "tensorflow": {
            "executable": "qnn-tensorflow-converter",
            "arguments": {
                "model_path_flag": "--input_network",
                "input_tensor_flag": "--input_dim",
                "output_tensor_flag": "--out_node",
                "output_path_flag": "--output_path",
                "quantization_flag":{
                    "quantization_overrides_flag": "--quantization_overrides",
                    "input_list_flag": "--input_list",
                    "param_quantizer_flag": "--param_quantizer",
                    "act_quantizer_flag": "--act_quantizer",
                    "weight_bw_flag": "--weight_bw",
                    "bias_bw_flag": "--bias_bw",
                    "act_bw_flag": "--act_bw",
                    "algorithms_flag": "--algorithms",
                    "ignore_encodings_flag": "--ignore_encodings",
                    "use_per_channel_quantization_flag": "--use_per_channel_quantization"
                }
            }
        },
        "onnx": {
            "executable": "qnn-onnx-converter",
            "arguments": {
                "model_path_flag": "--input_network",
                "input_tensor_flag": "--input_dim",
                "output_tensor_flag": "--out_node",
                "output_path_flag": "--output_path",
                "quantization_flag":{
                    "quantization_overrides_flag": "--quantization_overrides",
                    "input_list_flag": "--input_list",
                    "param_quantizer_flag": "--param_quantizer",
                    "act_quantizer_flag": "--act_quantizer",
                    "weight_bw_flag": "--weight_bw",
                    "bias_bw_flag": "--bias_bw",
                    "act_bw_flag": "--act_bw",
                    "algorithms_flag": "--algorithms",
                    "ignore_encodings_flag": "--ignore_encodings",
                    "use_per_channel_quantization_flag": "--use_per_channel_quantization"
                }
            }
        },
        "tflite": {
            "executable": "qnn-tflite-converter",
            "arguments": {
                "flags": [
                    "--disable_batchnorm_folding"
                ],
                "model_path_flag": "--input_network",
                "input_tensor_flag": "--input_dim",
                "output_tensor_flag": "--out_node",
                "output_path_flag": "--output_path",
                "quantization_flag":{
                    "quantization_overrides_flag": "--quantization_overrides",
                    "input_list_flag": "--input_list",
                    "param_quantizer_flag": "--param_quantizer",
                    "act_quantizer_flag": "--act_quantizer",
                    "weight_bw_flag": "--weight_bw",
                    "bias_bw_flag": "--bias_bw",
                    "act_bw_flag": "--act_bw",
                    "algorithms_flag": "--algorithms",
                    "ignore_encodings_flag": "--ignore_encodings",
                    "use_per_channel_quantization_flag": "--use_per_channel_quantization"
                }
            }
        }
    },
    "context_binary_generator": {
        "executable": "qnn-context-binary-generator",
        "arguments": {
            "model_path": "--model",
            "backend": "--backend",
            "binary_file": "--binary_file",
            "model_prefix": "--model_prefix",
            "output_dir": "--output_dir",
            "op_package": "--op_packages",
            "config_file": "--config_file",
            "enable_intermediate_outputs": "--enable_intermediate_outputs"
        },
        "backend_location": "{engine_path}/target/x86_64-linux-clang/lib/libQnnHtp.so"
    },
    "executor": {
        "executable":"qnn-net-run",
        "arguments": {
            "qnn_model_path": "--model",
            "retrieve_context": "--retrieve_context",
            "input_list": "--input_list",
            "backend": "--backend",
            "op_package": "--op_packages",
            "output_dir": "--output_dir",
            "debug": "--debug",
            "input_data_type": "--input_data_type",
            "output_data_type": "--output_data_type",
            "profiling_level": "--profiling_level",
            "perf_profile": "--perf_profile",
            "config_file": "--config_file",
            "log_level": "--log_level",
            "version": "--version"

        },
        "target_path": "/data/local/tmp/network_diagnosis",
        "environment_variables": {
            "PATH": "/data/local/tmp/network_diagnosis",
            "LD_LIBRARY_PATH": "/data/local/tmp/network_diagnosis:$LD_LIBRARY_PATH",
            "ADSP_LIBRARY_PATH": "/data/local/tmp/network_diagnosis;/system/lib/rfsa/adsp;/system/vendor/lib/rfsa/adsp;/dsp"
        }
    }
}
